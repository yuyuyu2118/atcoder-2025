# AtCoder ABC403 問題A - 奇数番目の和
# 問題の要点: 長さNの配列Aが与えられる。奇数番目（1-indexed）の要素の合計を求める。
# 問題の制約:
# - 1 ≤ N ≤ 100
# - 1 ≤ A_i ≤ 100
# - 入力はすべて整数

# 入力の読み込み
N = int(input())  # 配列の要素数 N を読み込む (1 ≤ N ≤ 100)
A = list(map(int, input().split()))  # N個の整数を空白区切りで読み込み、整数のリストに変換 (1 ≤ A_i ≤ 100)

# 注意: 問題文では「奇数番目」は1-indexedでの奇数番目を指します
# しかしPythonは0-indexedなので、奇数番目は配列のインデックス0,2,4,...に相当します

# 奇数番目（1-indexed）の要素の合計を計算
sum_odd_positions = 0  # 合計を保存する変数を初期化
for i in range(0, len(A), 2):  # 0から配列の長さまで、2つずつスキップして偶数インデックスを取得
    sum_odd_positions += A[i]  # インデックスiの要素を合計に加算（0-indexedの偶数インデックス = 1-indexedの奇数位置）

# 結果を出力
print(sum_odd_positions)

# 計算量の解析:
# - 時間計算量: O(N) - 配列の要素をN/2回だけ処理するため
# - 空間計算量: O(N) - 入力配列Aを格納するため
#
# 入力例の解説:
# 例1: [3, 1, 4, 1, 5, 9, 2] の奇数番目（1-indexed）の要素は 3, 4, 5, 2 で合計は 14
# 例2: [100] の奇数番目の要素は 100 のみで合計は 100
# 例3: [100, 10, 1, 10, 100, 10, 1, 10, 100, 10, 1, 10, 100, 10] の
#     奇数番目の要素は 100, 1, 100, 1, 100, 1, 100 で合計は 403
#
# 別の実装方法:
# - スライス表記を使う: sum(A[::2])
# これは A[0], A[2], A[4], ... を取り出して合計する簡潔な方法であり、
# 問題の制約（N≤100）では十分高速に動作します。
